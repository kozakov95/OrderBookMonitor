@rendermode InteractiveWebAssembly

<h3>Order Book Chart (Bids vs Asks)</h3>

<BarChart TItem="decimal" @ref="orderBookChart" />

@code {

    [Parameter] 
    public DepthOfMarketDto DepthOfMarket { get; set; }
    
    private BarChart<decimal> orderBookChart = new BarChart<decimal>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var bidsDataset = new BarChartDataset<decimal>
            {
                Label = "Bid amount",
                Data = new List<decimal>(),
                BackgroundColor = "rgba(0, 200, 0, 1)",
                BorderColor = "rgba(0, 200, 0, 1)",
                BorderWidth = 5,
            };

            var asksDataset = new BarChartDataset<decimal>
            {
                Label = "Ask amount",
                Data = new List<decimal>(),
                BackgroundColor = "rgba(255, 0, 0, 1)",
                BorderColor = "rgba(255, 0, 0, 1)",
                BorderWidth = 5,
            };

            await orderBookChart.AddLabelsDatasetsAndUpdate(new Collection<object>(), bidsDataset, asksDataset);

            await orderBookChart.SetOptions(new BarChartOptions
            {
                Plugins = new ChartPlugins
                {
                    Legend = new ChartLegend
                    {
                        Display = true
                    }
                },
            });

            await orderBookChart.Update();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await UpdateChart();
    }

    protected async Task UpdateChart()
    {
        if (DepthOfMarket != null && orderBookChart.Data != null)
        {
            var updatedPriceLabels = new List<object>();
            var updatedBidsData = new List<decimal>();
            var updatedAsksData = new List<decimal>();
            
            foreach (var bid in DepthOfMarket.Bids)
            {
                updatedPriceLabels.Add(bid.Price.ToString("F2"));
                updatedBidsData.Add(bid.Amount);
                updatedAsksData.Add(0);
            }
            
            updatedPriceLabels.Add("");
            updatedBidsData.Add(0); 
            updatedAsksData.Add(0); 
            
            foreach (var ask in DepthOfMarket.Asks)
            {
                updatedPriceLabels.Add(ask.Price.ToString("F2"));
                updatedAsksData.Add(ask.Amount);
                updatedBidsData.Add(0);
            }
            
            orderBookChart.Data.Labels = updatedPriceLabels;

            orderBookChart.Data.Datasets[0].Data = updatedBidsData;
            orderBookChart.Data.Datasets[1].Data = updatedAsksData;


            await orderBookChart.Update();
        }
    }
}
